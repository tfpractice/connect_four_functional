{"version":3,"file":"bundle.umd.js","sources":["../src/node.js","../src/player.js","../src/filter.js","../src/board.js","../src/game.js"],"sourcesContent":["import { Node, } from 'game_grid';\n\nconst { column, row, node: gNode, id } = Node;\n\nconst defP = Object.assign({}, gNode(), { player: null });\n\nexport const node = (c, r, player = null) =>\n    Object.assign({}, gNode(c, r), { player });\n\nexport const player = ({ player } = defP) => player;\n\nexport const copy = n => node(column(n), row(n), player(n));\n\nexport const setPlayer = p => n => node(column(n), row(n), p);\n\nexport const isFree = n => !!n && player(n) == null;\n\nexport const claim = p => n => isFree(n) ? setPlayer(p)(n) : n;\nexport const unClaim = n => setPlayer(null)(n);\n\nexport const samePlayer = n0 => n1 => player(n0) === player(n1);\n\nexport const sameID = a => b => id(a) === id(b);\n","import { claim as claimNode, } from './node';\nexport const playerInit = { name: '', score: 0, id: null };\n\nexport const player = (name = '', score = 0, id = name) => ({ name, score, id });\nexport const name = ({ name } = playerInit) => name;\nexport const score = ({ score } = playerInit) => score;\nexport const id = ({ id } = playerInit) => id;\nexport const copy = p => player(name(p), score(p), id(p));\n\nexport const setName = name => p => player(name, score(p), id(p));\nexport const setID = id => p => player(name(p), score(p), id);\nexport const setScore = score => p => player(name(p), score, id(p));\n\nexport const resetScore = setScore(0);\nexport const incrementScore = p => setScore(score(p) + 1)(p);\nexport const decrementScore = p => setScore(score(p) - 1)(p);\nexport const claim = p => claimNode(id(p));\n","import { asSet, filter, map, some, spread, } from 'fenugreek-collections';\nimport { Compare, } from 'game_grid';\nimport { isFree, samePlayer, } from './node';\n\nconst { samePos } = Compare;\n\nexport const nextFree = nArr => spread(nArr).find(isFree);\nexport const hasFree = nArr => some(nArr)(isFree);\nexport const byPlayer = nArr => (player = null) =>\n  filter(nArr)(samePlayer({ player }));\n\nexport const exceeds = lim => coll => asSet(coll).size > lim;\nexport const anyExceed = lim => coll => some(coll)(exceeds(lim));\nexport const byExcess = lim => arrays => filter(arrays)(exceeds(lim));\n\nexport const callIf = fn => boolFn => n => boolFn(n) ? fn(n) : n;\nexport const repIf = next => boolFn => n => boolFn(n) ? next : n;\nexport const repPos = next => repIf(next)(samePos(next));\nexport const repID = next => repIf(next)(samePos(next));\nexport const replace = next => nArr => map(nArr)(repPos(next));\n","import { some, } from 'fenugreek-collections';\nimport { Graph, } from 'graph-curry';\nimport { Components, Grid, } from 'game_grid';\nimport { id, } from './player';\nimport { copy, } from './node';\nimport { byExcess, byPlayer, exceeds, } from './filter';\n\nconst { graph, nodes, } = Graph;\nconst { genNodes: gen, } = Grid;\nconst { omniComps, } = Components;\n\nexport const genNodes = (c = 7, r = 6) => gen(c, r).map(copy);\nexport const board = (c = 7, r = 6) => graph(...genNodes(c, r));\n\nexport const playerNodes = b => p => byPlayer(nodes(b))(id(p));\nexport const playerGraph = b => p => graph(...playerNodes(b)(p));\n\nexport const hasWinComp = (g, n = 3) => some(omniComps(g))(exceeds(n));\nexport const winComps = (g, n = 3) => byExcess(n)(omniComps(g));\n","import { Graph, } from 'graph-curry';\nimport { Components, Filter, } from 'game_grid';\nimport { claim, } from './node';\nimport { genNodes, } from './board';\nimport { id, player, } from './player';\nimport { anyExceed, byExcess, byPlayer, nextFree, replace, } from './filter';\n\nconst { graph } = Graph;\nconst { omniComps } = Components;\nconst { byCol, } = Filter;\n\nconst dCol = 0;\nconst dPlr = [ player('player0', 0, 0), player('player1', 0, 1) ];\nconst dNod = genNodes(7, 6);\nconst init = ({ column: 0, nodes: genNodes(), players: dPlr, inPlay: false, min: 3 });\n\nexport const game =\n (players = dPlr, nodes = dNod, column = 0, inPlay = false, min = 3) =>\n  ({ players, nodes, column, inPlay, min });\n\nexport const column = ({ column } = init) => column;\nexport const nodes = ({ nodes } = init) => nodes;\nexport const inPlay = ({ inPlay } = init) => inPlay;\nexport const min = ({ min } = init) => min;\nexport const players = ({ players } = init) => players;\nexport const active = ({ players: [ active, passive ] } = init) => active;\nexport const passive = ({ players: [ active, passive ] } = init) => passive;\n\nexport const setNodes = nArr => g =>\n  game(players(g), nArr, column(g), inPlay(g), min(g));\n\nexport const setColumn = col => g =>\n  game(players(g), nodes(g), col, inPlay(g), min(g));\n\nexport const setPlayState = bool => g =>\n  game(players(g), nodes(g), column(g), !!bool, min(g));\n\nexport const setPlayers = pArr => g =>\n  game(pArr, nodes(g), column(g), inPlay(g), min(g));\n\nexport const setMin = m => g =>\n  game(players(g), nodes(g), column(g), inPlay(g), m);\n\nexport const board = g => graph(...nodes(g));\nexport const colNodes = g => byCol(nodes(g))(column(g));\nexport const next = g => nextFree(colNodes(g));\n\nexport const start = g => setPlayState(true)(g);\nexport const stop = g => setPlayState(false)(g);\nexport const canPlay = g => inPlay(g) && !!next(g);\nexport const locked = g => !canPlay(g);\nexport const toggleState = g => setPlayState(!inPlay(g))(g);\n\nexport const togglePlayers = g => setPlayers([ passive(g), active(g) ])(g);\n\nexport const playerNodes = g => p => byPlayer(nodes(g))(id(p));\nexport const actNodes = g => playerNodes(g)(active(g));\nexport const passNodes = g => playerNodes(g)(passive(g));\n\nexport const playerGraph = g => p => graph(...playerNodes(g)(p));\nexport const actGraph = g => playerGraph(g)(active(g));\nexport const passGraph = g => playerGraph(g)(passive(g));\n\nexport const playerComps = g => p => byExcess(1)(omniComps(playerGraph(g)(p)));\nexport const actComps = g => playerComps(g)(active(g));\nexport const passComps = g => playerComps(g)(passive(g));\n\nexport const isWinner = g => p => anyExceed(min(g))(playerComps(g)(p));\nexport const winner = g => players(g).find(isWinner(g));\nexport const endIfWon = g => winner(g) ? stop(g) : g;\n\nexport const claimSwap = g => replace(claim(id(active(g)))(next(g)))(nodes(g));\nexport const claimNext = g => locked(g) ? g : endIfWon(setNodes(claimSwap(g))(g));\n\nexport const select = g => locked(g) ? g : togglePlayers(claimNext(g));\n"],"names":["column","Node","row","gNode","node","id","defP","Object","assign","player","c","r","copy","n","setPlayer","p","isFree","claim","unClaim","samePlayer","n0","n1","sameID","a","b","playerInit","name","score","setName","setID","setScore","resetScore","incrementScore","decrementScore","claimNode","samePos","Compare","nextFree","spread","nArr","find","hasFree","some","byPlayer","filter","exceeds","asSet","coll","size","lim","anyExceed","byExcess","arrays","callIf","boolFn","fn","repIf","next","repPos","repID","replace","map","graph","Graph","nodes","gen","Grid","genNodes","omniComps","Components","board","playerNodes","playerGraph","hasWinComp","g","winComps","byCol","Filter","dPlr","dNod","init","players","inPlay","min","game","active","passive","setNodes","setColumn","col","setPlayState","bool","setPlayers","pArr","setMin","m","colNodes","start","stop","canPlay","locked","toggleState","togglePlayers","actNodes","passNodes","actGraph","passGraph","playerComps","actComps","passComps","isWinner","winner","endIfWon","claimSwap","claimNext","select"],"mappings":"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"}