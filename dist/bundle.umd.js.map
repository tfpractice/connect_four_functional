{"version":3,"file":"bundle.umd.js","sources":["../src/node.js","../src/player.js","../src/filter.js","../src/board.js","../src/game.js"],"sourcesContent":["import { Node, } from 'game_grid';\n\nconst { column, row, node: gNode, id } = Node;\n\nconst defP = Object.assign({}, gNode(), { player: null });\n\nexport const node = (c, r, player = null) =>\n    Object.assign({}, gNode(c, r), { player });\n\nexport const player = ({ player } = defP) => player;\n\nexport const copy = n => node(column(n), row(n), player(n));\n\nexport const setPlayer = p => n => node(column(n), row(n), p);\n\nexport const isFree = n => !!n && player(n) == null;\n\nexport const claim = p => n => isFree(n) ? setPlayer(p)(n) : n;\nexport const unClaim = n => setPlayer(null)(n);\n\nexport const samePlayer = n0 => n1 => player(n0) === player(n1);\n\nexport const sameID = a => b => id(a) === id(b);\n","import { claim as claimNode, } from './node';\n\nexport const playerInit = { name: '', score: 0, id: null };\n\nexport const player = (name = '', score = 0, id = name) => ({ name, score, id });\nexport const name = ({ name } = playerInit) => name;\nexport const score = ({ score } = playerInit) => score;\nexport const id = ({ id } = playerInit) => id;\nexport const copy = p => player(name(p), score(p), id(p));\n\nexport const setName = name => p => player(name, score(p), id(p));\nexport const setID = id => p => player(name(p), score(p), id);\nexport const setScore = score => p => player(name(p), score, id(p));\n\nexport const hasID = i => ({ id, }) => id === i;\nexport const sameID = p0 => p1 => id(p0) === id(p1);\nexport const matches = sameID;\nexport const xMatches = p0 => p1 => !matches(p0)(p1);\n\nexport const updatePlayer = next => p => sameID(next)(p) ? Object.assign({}, p, next) : p;\n\nexport const resetScore = setScore(0);\nexport const incrementScore = p => setScore(score(p) + 1)(p);\nexport const decrementScore = p => setScore(score(p) - 1)(p);\nexport const claim = p => claimNode(id(p));\n\n// const matches = p0 => p1 => hasID(p0.id)(p1);\n","import { asSet, filter, map, some, spread, } from 'fenugreek-collections';\nimport { Compare, } from 'game_grid';\nimport { isFree, samePlayer, } from './node';\n\nconst { samePos } = Compare;\n\nexport const nextFree = nArr => spread(nArr).find(isFree);\nexport const lastFree = nArr => spread(nArr).reverse().find(isFree);\nexport const hasFree = nArr => some(nArr)(isFree);\nexport const byPlayer = nArr => (player = null) =>\n  filter(nArr)(samePlayer({ player }));\n\nexport const exceeds = lim => coll => asSet(coll).size > lim;\nexport const anyExceed = lim => coll => some(coll)(exceeds(lim));\nexport const byExcess = lim => arrays => filter(arrays)(exceeds(lim));\n\nexport const callIf = fn => boolFn => n => boolFn(n) ? fn(n) : n;\nexport const repIf = next => boolFn => n => boolFn(n) ? next : n;\nexport const repPos = next => repIf(next)(samePos(next));\nexport const repID = next => repIf(next)(samePos(next));\nexport const replace = next => nArr => map(nArr)(repPos(next));\n","import { some, } from 'fenugreek-collections';\nimport { Graph, } from 'graph-curry';\nimport { Components, Grid, } from 'game_grid';\nimport { id, } from './player';\nimport { copy, } from './node';\nimport { byExcess, byPlayer, exceeds, } from './filter';\n\nconst { graph, nodes, } = Graph;\nconst { genNodes: gen, } = Grid;\nconst { omniComps, } = Components;\n\nexport const genNodes = (c = 7, r = 6) => gen(c, r).map(copy);\nexport const board = (c = 7, r = 6) => graph(...genNodes(c, r));\n\nexport const playerNodes = b => p => byPlayer(nodes(b))(id(p));\nexport const playerGraph = b => p => graph(...playerNodes(b)(p));\n\nexport const hasWinComp = (g, n = 3) => some(omniComps(g))(exceeds(n));\nexport const winComps = (g, n = 3) => byExcess(n)(omniComps(g));\n","import { Graph, } from 'graph-curry';\nimport { Components, Filter, } from 'game_grid';\nimport { claim, } from './node';\nimport { genNodes, } from './board';\nimport { hasID, id, player, sameID, updatePlayer, xMatches, } from './player';\nimport { anyExceed, byExcess, byPlayer, lastFree, replace, } from './filter';\n\nconst { graph } = Graph;\nconst { omniComps } = Components;\nconst { byCol, } = Filter;\n\nconst dCol = 0;\nconst dPlr = [ player('player0', 0, 0), player('player1', 0, 1) ];\nconst dNod = genNodes(7, 6);\nconst init = ({ column: 0, nodes: genNodes(), players: dPlr, inPlay: false, min: 3 });\n\nexport const game =\n (players = dPlr, nodes = dNod, column = 0, inPlay = false, min = 3) =>\n   ({ players, nodes, column, inPlay, min });\n\nexport const column = ({ column } = init) => column;\nexport const nodes = ({ nodes } = init) => nodes;\nexport const inPlay = ({ inPlay } = init) => inPlay;\nexport const min = ({ min } = init) => min;\nexport const players = ({ players } = init) => players;\nexport const active = ({ players: [ active, passive ] } = init) => active;\nexport const passive = ({ players: [ active, passive ] } = init) => passive;\n\nexport const setNodes = nArr => g =>\n  game(players(g), nArr, column(g), inPlay(g), min(g));\n\nexport const setColumn = col => g =>\n  game(players(g), nodes(g), col, inPlay(g), min(g));\n\nexport const setPlayState = bool => g =>\n  game(players(g), nodes(g), column(g), !!bool, min(g));\n\nexport const setPlayers = pArr => g =>\n  game(pArr, nodes(g), column(g), inPlay(g), min(g));\n\nexport const setMin = m => g =>\n  game(players(g), nodes(g), column(g), inPlay(g), m);\n  \nexport const copy = g =>\n  game(players(g), nodes(g), column(g), inPlay(g), min(g));\n\nexport const resetGame = g => game(players(g));\nexport const board = g => graph(...nodes(g));\nexport const colNodes = g => byCol(nodes(g))(column(g));\nexport const next = g => lastFree(colNodes(g));\n\nexport const start = g => setPlayState(true)(g);\nexport const stop = g => setPlayState(false)(g);\nexport const canPlay = g => inPlay(g) && !!next(g);\nexport const locked = g => !canPlay(g);\nexport const toggleState = g => setPlayState(!inPlay(g))(g);\n\nexport const togglePlayers = g => setPlayers([ passive(g), active(g) ])(g);\nexport const isActive = p => g => sameID(p)(active(g));\nexport const playerNodes = g => p => byPlayer(nodes(g))(id(p));\nexport const actNodes = g => playerNodes(g)(active(g));\nexport const passNodes = g => playerNodes(g)(passive(g));\n\nexport const playerGraph = g => p => graph(...playerNodes(g)(p));\nexport const actGraph = g => playerGraph(g)(active(g));\nexport const passGraph = g => playerGraph(g)(passive(g));\n\nexport const playerComps = g => p => byExcess(1)(omniComps(playerGraph(g)(p)));\nexport const actComps = g => playerComps(g)(active(g));\nexport const passComps = g => playerComps(g)(passive(g));\n\nexport const isWinner = g => p => anyExceed(min(g))(playerComps(g)(p));\nexport const winner = g => players(g).find(isWinner(g));\nexport const endIfWon = g => winner(g) ? stop(g) : g;\n\nexport const claimSwap = g => replace(claim(id(active(g)))(next(g)))(nodes(g));\nexport const claimNext = g => locked(g) ? g : endIfWon(setNodes(claimSwap(g))(g));\n\nexport const select = g => locked(g) ? g : togglePlayers(claimNext(g));\nexport const pSelect = p => g => isActive(p)(g) ? select(g) : g;\n\nexport const playerByID = i => g => players(g).find(hasID(i));\nexport const findPlr = p => g => players(g).find(sameID(p));\nexport const hasPlr = p => g => players(g).some(sameID(p));\nexport const mendPlr = p => g => setPlayers(players(g).map(updatePlayer(p)))(g);\nexport const pushPlr = p => g => setPlayers(players(g).concat(p))(g);\n\nexport const addPlr = p => g => hasPlr(p)(g) ? mendPlr(p)(g) : pushPlr(p)(g);\nexport const rmPlr = p => g => setPlayers((players(g)).filter(xMatches(p)))(g);\n\n// export const canPlay\n// export const claimNode = p=>g=> !isActive(p)(g)? g:setPlayers()\n// export const isActive=player=>game=>id\n// \"playerByID findPlr hasPlr mendPlr pushPlr\"\n"],"names":["column","Node","row","gNode","node","id","defP","Object","assign","player","c","r","copy","n","setPlayer","p","isFree","claim","samePlayer","n0","n1","a","b","playerInit","name","score","setScore","hasID","i","sameID","p0","p1","matches","xMatches","updatePlayer","next","resetScore","claimNode","lastFree","spread","nArr","reverse","find","byPlayer","filter","exceeds","asSet","coll","size","lim","anyExceed","some","byExcess","arrays","repIf","boolFn","repPos","samePos","replace","map","fn","graph","Graph","nodes","gen","Grid","genNodes","omniComps","Components","playerNodes","g","byCol","Filter","dPlr","dNod","init","players","inPlay","min","game","active","passive","setNodes","setPlayState","bool","setPlayers","pArr","colNodes","stop","canPlay","locked","togglePlayers","isActive","playerGraph","playerComps","isWinner","winner","endIfWon","claimSwap","claimNext","select","hasPlr","mendPlr","pushPlr","concat","col","m"],"mappings":"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"}