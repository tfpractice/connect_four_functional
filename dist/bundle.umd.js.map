{"version":3,"file":"bundle.umd.js","sources":["../src/node.js","../src/player.js","../src/filter.js","../src/board.js","../src/game.js"],"sourcesContent":["import { Node, } from 'game_grid';\n\nconst { column, row, node: gNode, id } = Node;\n\nconst defP = Object.assign({}, gNode(), { player: null });\n\nexport const node = (c, r, player = null) =>\n    Object.assign({}, gNode(c, r), { player });\n\nexport const player = ({ player } = defP) => player;\n\nexport const copy = n => node(column(n), row(n), player(n));\n\nexport const setPlayer = p => n => node(column(n), row(n), p);\n\nexport const isFree = n => !!n && player(n) == null;\n\nexport const claim = p => n => isFree(n) ? setPlayer(p)(n) : n;\nexport const unClaim = n => setPlayer(null)(n);\n\nexport const samePlayer = n0 => n1 => player(n0) === player(n1);\n\nexport const sameID = a => b => id(a) === id(b);\n","import { claim as claimNode, } from './node';\nexport const playerInit = { name: '', score: 0, id: null };\n\nexport const player = (name = '', score = 0, id = name) => ({ name, score, id });\nexport const name = ({ name } = playerInit) => name;\nexport const score = ({ score } = playerInit) => score;\nexport const id = ({ id } = playerInit) => id;\nexport const copy = p => player(name(p), score(p), id(p));\n\nexport const setName = name => p => player(name, score(p), id(p));\nexport const setID = id => p => player(name(p), score(p), id);\nexport const setScore = score => p => player(name(p), score, id(p));\n\nexport const sameID = p0 => p1 => id(p0) === id(p1);\nexport const resetScore = setScore(0);\nexport const incrementScore = p => setScore(score(p) + 1)(p);\nexport const decrementScore = p => setScore(score(p) - 1)(p);\nexport const claim = p => claimNode(id(p));\n","import { asSet, filter, map, some, spread, } from 'fenugreek-collections';\nimport { Compare, } from 'game_grid';\nimport { isFree, samePlayer, } from './node';\n\nconst { samePos } = Compare;\n\nexport const nextFree = nArr => spread(nArr).find(isFree);\nexport const hasFree = nArr => some(nArr)(isFree);\nexport const byPlayer = nArr => (player = null) =>\n  filter(nArr)(samePlayer({ player }));\n\nexport const exceeds = lim => coll => asSet(coll).size > lim;\nexport const anyExceed = lim => coll => some(coll)(exceeds(lim));\nexport const byExcess = lim => arrays => filter(arrays)(exceeds(lim));\n\nexport const callIf = fn => boolFn => n => boolFn(n) ? fn(n) : n;\nexport const repIf = next => boolFn => n => boolFn(n) ? next : n;\nexport const repPos = next => repIf(next)(samePos(next));\nexport const repID = next => repIf(next)(samePos(next));\nexport const replace = next => nArr => map(nArr)(repPos(next));\n","import { some, } from 'fenugreek-collections';\nimport { Graph, } from 'graph-curry';\nimport { Components, Grid, } from 'game_grid';\nimport { id, } from './player';\nimport { copy, } from './node';\nimport { byExcess, byPlayer, exceeds, } from './filter';\n\nconst { graph, nodes, } = Graph;\nconst { genNodes: gen, } = Grid;\nconst { omniComps, } = Components;\n\nexport const genNodes = (c = 7, r = 6) => gen(c, r).map(copy);\nexport const board = (c = 7, r = 6) => graph(...genNodes(c, r));\n\nexport const playerNodes = b => p => byPlayer(nodes(b))(id(p));\nexport const playerGraph = b => p => graph(...playerNodes(b)(p));\n\nexport const hasWinComp = (g, n = 3) => some(omniComps(g))(exceeds(n));\nexport const winComps = (g, n = 3) => byExcess(n)(omniComps(g));\n","import { Graph, } from 'graph-curry';\nimport { Components, Filter, } from 'game_grid';\nimport { claim, } from './node';\nimport { genNodes, } from './board';\nimport { id, player, } from './player';\nimport { anyExceed, byExcess, byPlayer, nextFree, replace, } from './filter';\n\nconst { graph } = Graph;\nconst { omniComps } = Components;\nconst { byCol, } = Filter;\n\nconst dCol = 0;\nconst dPlr = [ player('player0', 0, 0), player('player1', 0, 1) ];\nconst dNod = genNodes(7, 6);\nconst init = ({ column: 0, nodes: genNodes(), players: dPlr, inPlay: false, min: 3 });\n\nexport const game =\n (players = dPlr, nodes = dNod, column = 0, inPlay = false, min = 3) =>\n  ({ players, nodes, column, inPlay, min });\n\nexport const column = ({ column } = init) => column;\nexport const nodes = ({ nodes } = init) => nodes;\nexport const inPlay = ({ inPlay } = init) => inPlay;\nexport const min = ({ min } = init) => min;\nexport const players = ({ players } = init) => players;\nexport const active = ({ players: [ active, passive ] } = init) => active;\nexport const passive = ({ players: [ active, passive ] } = init) => passive;\n\nexport const setNodes = nArr => g =>\n  game(players(g), nArr, column(g), inPlay(g), min(g));\n\nexport const setColumn = col => g =>\n  game(players(g), nodes(g), col, inPlay(g), min(g));\n\nexport const setPlayState = bool => g =>\n  game(players(g), nodes(g), column(g), !!bool, min(g));\n\nexport const setPlayers = pArr => g =>\n  game(pArr, nodes(g), column(g), inPlay(g), min(g));\n\nexport const setMin = m => g =>\n  game(players(g), nodes(g), column(g), inPlay(g), m);\n\nexport const board = g => graph(...nodes(g));\nexport const colNodes = g => byCol(nodes(g))(column(g));\nexport const next = g => nextFree(colNodes(g));\n\nexport const start = g => setPlayState(true)(g);\nexport const stop = g => setPlayState(false)(g);\nexport const canPlay = g => inPlay(g) && !!next(g);\nexport const locked = g => !canPlay(g);\nexport const toggleState = g => setPlayState(!inPlay(g))(g);\n\nexport const togglePlayers = g => setPlayers([ passive(g), active(g) ])(g);\n\nexport const playerNodes = g => p => byPlayer(nodes(g))(id(p));\nexport const actNodes = g => playerNodes(g)(active(g));\nexport const passNodes = g => playerNodes(g)(passive(g));\n\nexport const playerGraph = g => p => graph(...playerNodes(g)(p));\nexport const actGraph = g => playerGraph(g)(active(g));\nexport const passGraph = g => playerGraph(g)(passive(g));\n\nexport const playerComps = g => p => byExcess(1)(omniComps(playerGraph(g)(p)));\nexport const actComps = g => playerComps(g)(active(g));\nexport const passComps = g => playerComps(g)(passive(g));\n\nexport const isWinner = g => p => anyExceed(min(g))(playerComps(g)(p));\nexport const winner = g => players(g).find(isWinner(g));\nexport const endIfWon = g => winner(g) ? stop(g) : g;\n\nexport const claimSwap = g => replace(claim(id(active(g)))(next(g)))(nodes(g));\nexport const claimNext = g => locked(g) ? g : endIfWon(setNodes(claimSwap(g))(g));\n\nexport const select = g => locked(g) ? g : togglePlayers(claimNext(g));\n\n// export const isActive=player=>game=>id\n"],"names":["column","Node","row","gNode","node","id","defP","Object","assign","player","c","r","copy","n","setPlayer","p","isFree","claim","samePlayer","n0","n1","a","b","playerInit","name","score","setScore","resetScore","p0","p1","claimNode","samePos","Compare","nextFree","spread","nArr","find","byPlayer","filter","exceeds","asSet","coll","size","lim","anyExceed","some","byExcess","arrays","repIf","boolFn","next","repPos","replace","map","fn","graph","Graph","nodes","gen","Grid","genNodes","omniComps","Components","playerNodes","g","byCol","Filter","dPlr","dNod","init","players","inPlay","min","game","active","passive","setNodes","setPlayState","bool","setPlayers","pArr","colNodes","stop","canPlay","locked","togglePlayers","playerGraph","playerComps","isWinner","winner","endIfWon","claimSwap","claimNext","col","m"],"mappings":"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"}