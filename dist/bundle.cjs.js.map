{"version":3,"file":"bundle.cjs.js","sources":["../src/node.js","../src/player.js","../src/filter.js","../src/board.js","../src/game.js"],"sourcesContent":["import { Node, } from 'game_grid';\n\nconst { column, row, node: gNode, id } = Node;\n\nconst defP = Object.assign({}, gNode(), { player: null });\n\nexport const node = (c, r, player = null) =>\n    Object.assign({}, gNode(c, r), { player });\n\nexport const player = ({ player } = defP) => player;\n\nexport const copy = n => node(column(n), row(n), player(n));\n\nexport const setPlayer = p => n => node(column(n), row(n), p);\n\nexport const isFree = n => !!n && player(n) == null;\n\nexport const claim = p => n => isFree(n) ? setPlayer(p)(n) : n;\nexport const unClaim = n => setPlayer(null)(n);\n\nexport const samePlayer = n0 => n1 => player(n0) === player(n1);\n\nexport const sameID = a => b => id(a) === id(b);\n","import { claim as claimNode, } from './node';\n\nexport const playerInit = { name: '', score: 0, id: null };\n\nexport const player = (name = '', score = 0, id = name) => ({ name, score, id });\nexport const name = ({ name } = playerInit) => name;\nexport const score = ({ score } = playerInit) => score;\nexport const id = ({ id } = playerInit) => id;\nexport const copy = p => player(name(p), score(p), id(p));\n\nexport const setName = name => p => player(name, score(p), id(p));\nexport const setID = id => p => player(name(p), score(p), id);\nexport const setScore = score => p => player(name(p), score, id(p));\n\nexport const hasID = i => ({ id, }) => id === i;\nexport const sameID = p0 => p1 => id(p0) === id(p1);\nexport const updatePlayer = next => p => sameID(next)(p) ? Object.assign({}, p, next) : p;\n\nexport const resetScore = setScore(0);\nexport const incrementScore = p => setScore(score(p) + 1)(p);\nexport const decrementScore = p => setScore(score(p) - 1)(p);\nexport const claim = p => claimNode(id(p));\n\n// const matches = p0 => p1 => hasID(p0.id)(p1);\nconst xMatches = p0 => p1 => !matches(p0)(p1);\n","import { asSet, filter, map, some, spread, } from 'fenugreek-collections';\nimport { Compare, } from 'game_grid';\nimport { isFree, samePlayer, } from './node';\n\nconst { samePos } = Compare;\n\nexport const nextFree = nArr => spread(nArr).find(isFree);\nexport const lastFree = nArr => spread(nArr).reverse().find(isFree);\nexport const hasFree = nArr => some(nArr)(isFree);\nexport const byPlayer = nArr => (player = null) =>\n  filter(nArr)(samePlayer({ player }));\n\nexport const exceeds = lim => coll => asSet(coll).size > lim;\nexport const anyExceed = lim => coll => some(coll)(exceeds(lim));\nexport const byExcess = lim => arrays => filter(arrays)(exceeds(lim));\n\nexport const callIf = fn => boolFn => n => boolFn(n) ? fn(n) : n;\nexport const repIf = next => boolFn => n => boolFn(n) ? next : n;\nexport const repPos = next => repIf(next)(samePos(next));\nexport const repID = next => repIf(next)(samePos(next));\nexport const replace = next => nArr => map(nArr)(repPos(next));\n","import { some, } from 'fenugreek-collections';\nimport { Graph, } from 'graph-curry';\nimport { Components, Grid, } from 'game_grid';\nimport { id, } from './player';\nimport { copy, } from './node';\nimport { byExcess, byPlayer, exceeds, } from './filter';\n\nconst { graph, nodes, } = Graph;\nconst { genNodes: gen, } = Grid;\nconst { omniComps, } = Components;\n\nexport const genNodes = (c = 7, r = 6) => gen(c, r).map(copy);\nexport const board = (c = 7, r = 6) => graph(...genNodes(c, r));\n\nexport const playerNodes = b => p => byPlayer(nodes(b))(id(p));\nexport const playerGraph = b => p => graph(...playerNodes(b)(p));\n\nexport const hasWinComp = (g, n = 3) => some(omniComps(g))(exceeds(n));\nexport const winComps = (g, n = 3) => byExcess(n)(omniComps(g));\n","import { Graph, } from 'graph-curry';\nimport { Components, Filter, } from 'game_grid';\nimport { claim, } from './node';\nimport { genNodes, } from './board';\nimport { hasID, id, player, sameID, updatePlayer, } from './player';\nimport { anyExceed, byExcess, byPlayer, lastFree, replace, } from './filter';\n\nconst { graph } = Graph;\nconst { omniComps } = Components;\nconst { byCol, } = Filter;\n\nconst dCol = 0;\nconst dPlr = [ player('player0', 0, 0), player('player1', 0, 1) ];\nconst dNod = genNodes(7, 6);\nconst init = ({ column: 0, nodes: genNodes(), players: dPlr, inPlay: false, min: 3 });\n\nexport const game =\n (players = dPlr, nodes = dNod, column = 0, inPlay = false, min = 3) =>\n   ({ players, nodes, column, inPlay, min });\n\nexport const column = ({ column } = init) => column;\nexport const nodes = ({ nodes } = init) => nodes;\nexport const inPlay = ({ inPlay } = init) => inPlay;\nexport const min = ({ min } = init) => min;\nexport const players = ({ players } = init) => players;\nexport const active = ({ players: [ active, passive ] } = init) => active;\nexport const passive = ({ players: [ active, passive ] } = init) => passive;\n\nexport const setNodes = nArr => g =>\n  game(players(g), nArr, column(g), inPlay(g), min(g));\n\nexport const setColumn = col => g =>\n  game(players(g), nodes(g), col, inPlay(g), min(g));\n\nexport const setPlayState = bool => g =>\n  game(players(g), nodes(g), column(g), !!bool, min(g));\n\nexport const setPlayers = pArr => g =>\n  game(pArr, nodes(g), column(g), inPlay(g), min(g));\n\nexport const setMin = m => g =>\n  game(players(g), nodes(g), column(g), inPlay(g), m);\n  \nexport const copy = g =>\n  game(players(g), nodes(g), column(g), inPlay(g), min(g));\n\nexport const resetGame = g => game(players(g));\nexport const board = g => graph(...nodes(g));\nexport const colNodes = g => byCol(nodes(g))(column(g));\nexport const next = g => lastFree(colNodes(g));\n\nexport const start = g => setPlayState(true)(g);\nexport const stop = g => setPlayState(false)(g);\nexport const canPlay = g => inPlay(g) && !!next(g);\nexport const locked = g => !canPlay(g);\nexport const toggleState = g => setPlayState(!inPlay(g))(g);\n\nexport const togglePlayers = g => setPlayers([ passive(g), active(g) ])(g);\nexport const isActive = p => g => sameID(p)(active(g));\nexport const playerNodes = g => p => byPlayer(nodes(g))(id(p));\nexport const actNodes = g => playerNodes(g)(active(g));\nexport const passNodes = g => playerNodes(g)(passive(g));\n\nexport const playerGraph = g => p => graph(...playerNodes(g)(p));\nexport const actGraph = g => playerGraph(g)(active(g));\nexport const passGraph = g => playerGraph(g)(passive(g));\n\nexport const playerComps = g => p => byExcess(1)(omniComps(playerGraph(g)(p)));\nexport const actComps = g => playerComps(g)(active(g));\nexport const passComps = g => playerComps(g)(passive(g));\n\nexport const isWinner = g => p => anyExceed(min(g))(playerComps(g)(p));\nexport const winner = g => players(g).find(isWinner(g));\nexport const endIfWon = g => winner(g) ? stop(g) : g;\n\nexport const claimSwap = g => replace(claim(id(active(g)))(next(g)))(nodes(g));\nexport const claimNext = g => locked(g) ? g : endIfWon(setNodes(claimSwap(g))(g));\n\nexport const select = g => locked(g) ? g : togglePlayers(claimNext(g));\n\nexport const playerByID = i => g => players(g).find(hasID(i));\nexport const findPlr = p => g => players(g).find(sameID(p));\nexport const hasPlr = p => g => players(g).some(sameID(p));\nexport const mendPlr = p => g => setPlayers(players(g).map(updatePlayer(p)))(g);\nexport const pushPlr = p => g => setPlayers(players(g).concat(p))(g);\n\n// export const canPlay\n// export const claimNode = p=>g=> !isActive(p)(g)? g:setPlayers()\n// export const isActive=player=>game=>id\n"],"names":["column","Node","row","gNode","node","id","defP","Object","assign","player","c","r","copy","n","setPlayer","p","isFree","claim","unClaim","samePlayer","n0","n1","sameID","a","b","playerInit","name","score","setName","setID","setScore","hasID","i","p0","p1","updatePlayer","next","resetScore","incrementScore","decrementScore","claimNode","samePos","Compare","nextFree","spread","nArr","find","lastFree","reverse","hasFree","some","byPlayer","filter","exceeds","asSet","coll","size","lim","anyExceed","byExcess","arrays","callIf","boolFn","fn","repIf","repPos","repID","replace","map","graph","Graph","nodes","gen","Grid","genNodes","omniComps","Components","board","playerNodes","playerGraph","hasWinComp","g","winComps","byCol","Filter","dPlr","dNod","init","players","inPlay","min","game","active","passive","setNodes","setColumn","col","setPlayState","bool","setPlayers","pArr","setMin","m","resetGame","colNodes","start","stop","canPlay","locked","toggleState","togglePlayers","isActive","actNodes","passNodes","actGraph","passGraph","playerComps","actComps","passComps","isWinner","winner","endIfWon","claimSwap","claimNext","select","playerByID","findPlr","hasPlr","mendPlr","pushPlr","concat"],"mappings":"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"}